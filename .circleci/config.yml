version: 2.1

commands:
  save-to-memstash:
    description: Save some string value to memstash
    parameters:
      key:
        type: string
      value:
        type: string
      token:
        type: string
        default: "${memstashToken}"
    steps:
      - run: |
          echo "token: <<parameters.token>>\nkey: <<parameters.key>>\nvalue: <<parameters.value>>"
      - run: |
          curl -H "Content-Type: text/plain" -H "token: <<parameters.token>>" \
          --request PUT --data "<<parameters.value>>" "https://api.memstash.io/values/<<parameters.key>>"

  #destroy-environment:
    #description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      ## Add parameter here   
    #steps:
      #- run:
          #name: Destroy environments
          #when: on_fail
          #command: |
            ## Your code here
            #exit 1

  #revert-migrations:
    #description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      ## Add parameter here     
    #steps:
      #- run:
          #name: Revert migrations
          ## Add when this will run
          #command: |
            ## Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            #SUCCESS = 1
            #if(( $SUCCESS==1 )); 
            #then
            ##  cd ~/project/backend
            ##  npm install
            ##  Add revert code here. You can find this in the Getting Started section.
              #exit 1
            #fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end testing
          command: |
            cd frontend
            npm test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end testing
          command: |
            cd backend
            npm test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end auditing
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end auditing
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # deploy backend stack through cloudformation template
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"
            # get the newly created server public DNS name
            echo 'export backendDNSname=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text)' >> $BASH_ENV 
      - save-to-memstash:
          key: "backendDNSname"
          value: "$backendDNSname"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  #configure-infrastructure:
    #docker:
      ## Docker image here that supports Ansible
    #steps:
      ## Checkout code from git
      ## Add ssh keys with fingerprint
      ## attach workspace
      #- run:
          #name: Install dependencies
          #command: |
            ## Your code here
            #exit 1
      #- run:
          #name: Configure server
          #command: |
            ## Your code here
            #exit 1
      ## Here's where you will add some code to rollback on failure      

  #run-migrations:
    #docker:
      ## Docker image here that supports NodeJS
    #steps:
      ## Checkout code from git
      #- run:
          #name: Run migrations
          #command: |
            ## Your code here
            #exit 1
      #- run:
          #name: Send migration results to memstash
          #command: |
            ## Your code here
            #exit 1
     ## Here's where you will add some code to rollback on failure      

  #deploy-frontend:
    #docker:
      ## Docker image here that supports AWS CLI
    #steps:
      ## Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            ## your code here
      #- run:
          #name: Get backend url
          #command: |
            ## your code here
            #export API_URL="http://${BACKEND_IP}:3030"
            #echo "${API_URL}"
      #- run:
          #name: Deploy frontend objects
          #command: |
            ## your code here
      ## Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
    #docker:
      ## Docker image here that supports Ansible
    #steps:
      ## Checkout code from git
      ## Add ssh keys with fingerprint
      ## attach workspace
      #- run:
          #name: Install dependencies
          #command: |
            ## your code here
      #- run:
          #name: Deploy backend
          #command: |
            ## your code here
      ## Here's where you will add some code to rollback on failure  

  #smoke-test:
    #docker:
      ## Lightweight Docker image 
    #steps:
      ## Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            ## your code here
      #- run:
          #name: Get backend url
          #command: |
            ## your code here
      #- run:
          #name: Backend smoke test.
          #command: |
            ## your code here
      #- run:
          #name: Frontend smoke test.
          #command: |
            ## your code here
      ## Here's where you will add some code to rollback on failure  

  #cloudfront-update:
    #docker:
      ## Docker image here that supports AWS CLI
    #steps:
      ## Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            ## your code here
      #- run:
          #name: Update cloudfront distribution
          #command: |
            ## your code here
      ## Here's where you will add some code to rollback on failure  

#cleanup:
    #docker:
      ## Docker image here
    #steps:
      ## Checkout code from git
      #- run:
          #name: Get old stack workflow id
          #command: |
            ## your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
      #- run:
          #name: Remove old stacks and files
          #command: |
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #then
              ## your code here
            #fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main] # [test-feature-branch]
      #- configure-infrastructure:
          #requires: [deploy-infrastructure]
      #- run-migrations:
          #requires: [configure-infrastructure]
      #- deploy-frontend:
          #requires: [run-migrations]
      #- deploy-backend:
          #requires: [run-migrations]
      #- smoke-test:
          #requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]
